#################################################################
#
#          Likelihood Methods in Ecology
#
#  Lab 3 - Probability Density Functions as Likelihood Functions
#
#################################################################


#######################################################################
#
#   The beta PDF  (dbeta)
#
#   for data that take on values between 0 and 1 (i.e. 0 <= x <= 1)
#
#
#######################################################################

#  the dbeta function has two parameters: shape1 (a) and shape2 (b) 
#  (both of which have to be > 0)
#
#  the mean (E[X]) is a/(a+b)
#
#  so, again, to parameterize a model that predicts in terms of the mean of the data,
#   write a wrapper:

beta_pdf <- function(x,mean,shape1,log=FALSE)
{  shape2 <- (shape1 - (mean*shape1))/mean
   dbeta(x,shape1,shape2,ncp=0,log=F)
}

#  generate some examples...
x <- seq(0,1,0.01)

shape1 <- 4

mean = 0.1
y1 <- beta_pdf(x,mean,shape1)
windows()
plot(x,y1,type="l",lwd=3,cex.main = 1.5, cex.lab = 1.5,pch=19,col=1,xlab="x",
   ylab="P(x)", main = "Beta PDF")
text(0.1,0.9,paste("Shape1 =",shape1))

mean = 0.25
y2 <- beta_pdf(x,mean,shape1)
lines(x,y2,lwd=3,col=2)

mean = 0.50
y3 <- beta_pdf(x,mean,shape1)
lines(x,y3,lwd=3,col=3)

mean = 0.95
y4 <- beta_pdf(x,mean,shape1)
lines(x,y4,lwd=3,col=4)

leg <- c("mean = 0.1","mean = 0.25","mean = 0.5","mean = 0.95")
legend("topright", legend=leg, cex=1.0, lty=1,lwd=3, col=1:4)

#  FIRST WARNING
#    DOES THIS FUNCTION BY ITSELF BEHAVE LIKE A pdf?
#    (1) values >0 and < 1?
#    (2) does the integral sum to 1?
#
#  OBVIOUSLY NO, THE SOLUTION IS TO "NORMALIZE" THE FUNCTION


#  WARNING - like some of the other PDFs, this function has limits as a pdf.
#    In particular, for various combinations of the two parameters, the function
#    predicts either zero or positive infinity when x = 0 or x = 1.  

#    Since log(0) is minus infinity, the summed log-likelihood for a model and dataset
#      containing observations that generate a prob(x) = 0 will also be minus infinity

#    One somewhat crude way to deal with this is to discretize the scale of 0-1 into intervals
#      and then "normalize" the prob(x) based on the sum of probabilities across the intervals

#    This will "catch" zeros and ones in the first and last bins, and assign them probabilities based on
#      the mid-point of those bins (which presumably will not be either zero or infinity)

#  An example

int <- 100
mean <- 0.95
shape1 <- 4

discrete_beta_pdf <- function(x,mean,shape1,log=FALSE,int = 100)
{ x_int <- seq(0+1/(2*int),1-1/(2*int),1/int)
  shape2 <- (shape1 - (mean*shape1))/mean
  # create a vector of discretized and normalized probabilities over the range from 0 - 1
  discrete_beta <- dbeta(x_int,shape1,shape2,ncp=0,log)/sum(dbeta(x_int,shape1,shape2,ncp=0,log))
  # now, assign probabilities to the observations based on which interval they are in
  prob <- rep(0,length(x))
  for (i in 1:length(x))
  { index <- trunc(x[i]*int)+1
    index <- ifelse(index >int,int,index)
    prob[i] <- discrete_beta[index]}
  return(prob)
}

shape1 <- 4

mean <- 0.1
y1 <- discrete_beta_pdf(x,mean,shape1)
windows()
plot(x,y1,type="l",lwd=3,cex.main = 1.5, cex.lab = 1.5,pch=19,col=1,xlab="x",
   ylab="P(x)", main = "Discrete Beta PDF")
text(0.4,0.05,paste("Shape1 =",shape1),cex=1.5)

mean = 0.25
y2 <- discrete_beta_pdf(x,mean,shape1)
lines(x,y2,lwd=3,col=2)

mean = 0.50
y3 <- discrete_beta_pdf(x,mean,shape1)
lines(x,y3,lwd=3,col=3)

mean = 0.95
y4 <- discrete_beta_pdf(x,mean,shape1)
lines(x,y4,lwd=3,col=4)

leg <- c("mean = 0.1","mean = 0.25","mean = 0.5","mean = 0.95")
legend("topright", legend=leg, cex=1.0, lty=1,lwd=3, col=1:4)
